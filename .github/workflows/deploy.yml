name: Terraform Azure VM Deployment

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      run: terraform init

    - name: Create Blob Container if not exists
      run: |
        az storage container create \
          --name tfstate \
          --account-name mytfstateaccount1 \
          --account-key ${{ secrets.STORAGE_ACCOUNT_KEY }} \
          --output none || true

    - name: Terraform Apply
      run: terraform apply -auto-approve

    - name: Upload Terraform State to Blob
      run: |
        az storage blob upload \
          --account-name mytfstateaccount1 \
          --account-key ${{ secrets.STORAGE_ACCOUNT_KEY }} \
          --container-name tfstate \
          --name terraform.tfstate \
          --file terraform.tfstate \
          --overwrite

    - name: Acquire Blob Lease (Lock)
      id: acquire_lock
      run: |
        lease_id=$(az storage blob lease acquire \
          --container-name tfstate \
          --blob-name terraform.tfstate \
          --account-name mytfstateaccount1 \
          --account-key ${{ secrets.STORAGE_ACCOUNT_KEY }} \
          --query leaseId \
          --output tsv)
        echo "lease_id=$lease_id" >> $GITHUB_OUTPUT

    - name: Release Blob Lease (Unlock)
      if: always()
      run: |
        az storage blob lease release \
          --container-name tfstate \
          --blob-name terraform.tfstate \
          --account-name mytfstateaccount1 \
          --account-key ${{ secrets.STORAGE_ACCOUNT_KEY }} \
          --lease-id ${{ steps.acquire_lock.outputs.lease_id }}
